Goで、Concatnative Stack-Oriented Programming Languageを作る

5 Apr 2019
Tags: go

朝倉
ITS
mk2@mk2.red
https://mk2.red

* 自己紹介
- 朝倉 遼
- 2018/08入社(転職)
- 30歳まで東京
- 実家も東京
- 今は福井

* 今日話すこと
- スタック指向かつ連鎖性言語の話
- Goでlexerを書くときのおすすめの方法

* スタック指向プログラミング言語とは？

いくつかのプログラミング言語はスタック指向である。スタック指向言語は、基本操作（二つの数の加算、一文字表示など）で *スタックから引数を取ってくるようになっていて、結果をスタックに返す* ようになっている言語である。

たいていは複数のスタックを使うよう設計されており、典型的なForthは、引数受け渡しのためのスタックとサブルーチンのリターンアドレスのためのスタックを持つ。PostScriptはリターンスタックとオペランドスタックを持ち、グラフィックス状態スタックと辞書スタックも持っている。日本語プログラミング言語のMindもForthベースである。

.link https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E6%8C%87%E5%90%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E スタック#スタック指向プログラミング言語

* 要するに

- 超シンプルなプログラミング言語
- プログラマが手で書くことは、（酔狂な暇人を除いて）基本的に無い

* 連鎖性プログラミング言語とは？

- RPN（逆ポーランド記法）で書く
- 有名所はForth

  "Hello world" print
  1 2 + 4 *

- ポイントフリースタイルの一種
- Haskellとかもポイントフリースタイル
- 連鎖性プログラミング言語は、だいたいスタック指向プログラミング言語でもある

* どういうところが魅力なのか？
- データとコードが同じ構造を持つ
- いわゆる同図象性
- メタプロがやりやすい
- 言語処理系を自作する、という点において、 *Lexer/Parserを書くのが楽*

* 実装していく

.link https://github.com/mk2/yon

3年前にGo1.5で実装。最近またいじり始めたが、特に大きな修正なく動いている。 *後方互換性* バンザイ！

	(user) 1 2 3 4 arr [ dup ] apply [ 1 + dup ] each
	(user) .s
	=> 
	|    0| <number> 5.000000
	|    1| <number> 5.000000
	|    2| <number> 4.000000
	|    3| <number> 4.000000
	|    4| <number> 3.000000
	|    5| <number> 3.000000
	|    6| <number> 2.000000
	|    7| <number> 2.000000
	|    8| <array>  {<number> 1.000000, <number> 2.000000, <number> 3.000000, <number> 4.000000}

こんな感じのコードをREPLで実行可能です。

* プログラミング言語処理系を実装するということ

一般的には、下記のように言語処理系は動く。

  文字列
   ↓ (Lexer)
  トークンの列
   ↓ (Parser)
  プログラムを構成する要素の列
   ↓ (Interpreter)
  逐次実行処理

※仮想マシンとか使うともっと複雑です。

* Lexerの実装

Rob Pike御大が出している、GoでのLexer実装パターンに則って実装。

.link https://talks.golang.org/2011/lex.slide Lexical Scanning in Go - 30 August 2011, Rob Pike

Lexerの実装方法はいくつかあるが、御大は、ツールや正規表現に頼るよりも自分で書くことを勧めている。

- lexやragelのようなプログラムを生成してくれるツール

大変な割に得るものが少ない by Rob Pike

- 正規表現

遅い、過剰 by Rob Pike

- 状態・アクション、switch文で実装

* 状態関数

  type stateFn func(*lexer) stateFn

- 状態を関数として表現する
- 関数を評価すると、次の状態（関数）が手に入る
- 再帰的な型定義

* Goroutineとどう合わせて使うか？

.background image/muscle_gopher.png

- 状態関数をGoroutineとして実行
- トークンが生成できたら、チャンネルに送信する

* lexerのコード解説

* 

lexer型の定義

.code ./code/lexer.go /START LEXER_TYPE OMIT/,/END LEXER_TYPE OMIT/

* 

lexerを開始するところ

.code ./code/lexer.go /START NEW_LEXER OMIT/,/END NEW_LEXER OMIT/

.code ./code/lexer.go /START LEXER_RUN OMIT/,/END LEXER_RUN OMIT/

* 

状態関数の遷移部分

.code ./code/lexer.go /START STATEFN_START OMIT/,/END STATEFN_START OMIT/

.code ./code/lexer.go /START STATEFN_END OMIT/,/END STATEFN_END OMIT/

* Rob Pike法のメリット

なんとなくわかりやすい気がする。

昔Rustでもlexerを書いてみたが、

.link https://github.com/mk2/muun/blob/master/src/lex/tokenizer.rs lexer by rust

今読み返してもよくわからない。（状態がどう遷移してるのか読み取れない。）

だがしかし、Goの方は久々に読み返してもよく分かる。（状態がどう動いているのか、関数の呼び出し部分だけ追っていけばわかる。）

* Parserの実装

yonに関しては、lexerとほぼ同じで、stateFnパターンで実装。

正直良くわからずに実装してます。連鎖性プログラミング言語の場合、多分そこまで複雑な方法が必要ないので。

* Parserのコード解説

* 

Parserの定義部分

.code code/parser.go /START PARSER_TYPE OMIT/,/END PARSER_TYPE OMIT/

* 

Parser開始部分

.code code/parser.go /START PARSER_NEW OMIT/,/END PARSER_NEW OMIT/
.code code/parser.go /START PARSER_RUN OMIT/,/END PARSER_RUN OMIT/

* 

再帰的にstateFnが呼ばれていく部分

.code code/parser.go /START STATEFN_START OMIT/,/END STATEFN_START OMIT/
.code code/parser.go /START PARSE_ANON_FUNC OMIT/,/END PARSE_ANON_FUNC OMIT/
.code code/parser.go /START PARSE_ANON_FUNC_START OMIT/,/END PARSE_ANON_FUNC_START OMIT/
.code code/parser.go /START PARSE_ANON_FUNC_BODY OMIT/,/END PARSE_ANON_FUNC_BODY OMIT/

* 

.code code/parser.go /START PARSE_CHAIN_WORD_BODY OMIT/,/END PARSE_CHAIN_WORD_BODY OMIT/
.code code/parser.go /START SQ_BRA OMIT/,/END SQ_BRA OMIT/
.code code/parser.go /START PARSE_CHAIN_WORD_BODY_END OMIT/,/END PARSE_CHAIN_WORD_BODY_END OMIT/

* インタプリタの実装

- やってて一番楽しい部分 
- Lexer/Parserの苦痛はここで報われる

だがしかし、ちょっとここまで書く余裕がありませんでした！

* yonで目指しているもの

もともとyonを作り始めたきっかけは、

- 複数のノードが協調して動くシステムを作ったとき、あるノードから別のノードの情報や操作が簡単に出来ないか
- あるノードで処理していたプログラムを、別のノードで継続して処理できないのか
- スタック指向言語であれば、スタックの状態が同じであれば処理を別のノードに簡単に移せるのでは
- 連鎖性プログラミング言語、Parserで悩まずに済みそう

という理由から作り始めました。まだその道すがらですが、その目標に向かって地道に作っていこうと思っています。

